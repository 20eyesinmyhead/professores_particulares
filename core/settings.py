"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
"""
import os 
from pathlib import Path
# ADICIONADO: Import para o banco de dados de produção
import dj_database_url 

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# MODIFICADO: Carrega a SECRET_KEY do ambiente (produção) ou usa a sua local (desenvolvimento)
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-#vv6=3)!8f96h@_-w+jz84&1v9b=1k56^p4eg7+$#$$3mrgkk-')

# MODIFICADO: DEBUG é 'False' em produção (quando a var 'RENDER' existir) e 'True' localmente
DEBUG = 'RENDER' not in os.environ

# MODIFICADO: Adiciona o host do Render.com automaticamente em produção
ALLOWED_HOSTS = []

RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'storages', # ADICIONADO: Para suporte ao Amazon S3
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # ADICIONADO: WhiteNoise Middleware (deve vir logo após o SecurityMiddleware)
    'whitenoise.middleware.WhiteNoiseMiddleware', 
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# MODIFICADO: Configuração de banco de dados para produção (Render) e fallback para local (sqlite3)
DATABASES = {
    'default': dj_database_url.config(
        # Usa o sqlite3 como padrão se a DATABASE_URL (do Render) não for encontrada
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",
        conn_max_age=600
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br' # Ajustado para português
TIME_ZONE = 'America/Sao_Paulo' # Ajustado para o fuso horário brasileiro

USE_I18N = True

USE_TZ = True


# ----------------------------------------------------
# CONFIGURAÇÃO DE ARQUIVOS ESTÁTICOS
# ----------------------------------------------------

# URL que o navegador usa para acessar os arquivos
STATIC_URL = '/static/'

# Diretórios onde o Django procura arquivos estáticos em DESENVOLVIMENTO
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'), 
]

# Pasta onde os arquivos serão COLETADOS em PRODUÇÃO (collectstatic)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# ADICIONADO: Configuração de armazenamento do WhiteNoise para produção
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ----------------------------------------------------
# CONFIGURAÇÕES DO PROJETO (Redirecionamentos, E-mail, Usuário)
# ----------------------------------------------------

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Configuração de E-mail para Desenvolvimento
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'noreply@professoresvoluntarios.com'
EMAIL_SUBJECT_PREFIX = '[Professores Voluntários] '

# CONFIGURAÇÃO DE USUÁRIO CUSTOMIZADO
AUTH_USER_MODEL = 'users.CustomUser'


# ----------------------------------------------------
# CONFIGURAÇÃO DE ARQUIVOS DE MÍDIA (AMAZON S3)
# ----------------------------------------------------

# Só use S3 se estiver em produção (quando a var 'RENDER' existir)
if 'RENDER' in os.environ:
    # --- Configuração de Mídia (Uploads) para Amazon S3 ---
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME', 'us-east-1') # Defina sua região
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_FILE_OVERWRITE = False # Não sobrescrever arquivos com o mesmo nome

    # Define o backend de armazenamento padrão para arquivos de mídia
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    
    # Define o local onde os arquivos de mídia serão salvos no bucket
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"
    # O Django ainda precisa de um root local temporário para manipulação de arquivos
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

else:
    # --- Configuração local (desenvolvimento) ---
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'

